name: Test & Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub repository 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. pnpm 설치
      - name: Install pnpm
        run: npm install -g pnpm

      # 3. Node.js 및 pnpm 설정
      - name: Set up Node.js and pnpm
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"

      # 4. 의존성 설치 (루트에서 실행)
      - name: Install dependencies (Monorepo)
        run: pnpm install --frozen-lockfile

      # 5. 백엔드 테스트 실행 (NestJS)
      - name: Run Backend Tests
        run: |
          cd packages/backend
          pnpm test

      # 6. 프론트엔드 테스트 실행 (React)
      - name: Run Frontend Tests
        run: |
          cd packages/frontend

      # 7. 백엔드 빌드
      - name: Build Backend
        run: |
          cd packages/backend
          pnpm build
          tar -czf backend.tar.gz dist package.json ecosystem.config.js

      # 8. 프론트엔드 빌드
      - name: Build Frontend
        run: |
          cd packages/frontend
          pnpm build
          tar -czf frontend.tar.gz dist package.json

      # 9. pnpm-lock.yaml을 별도로 압축
      - name: Archive pnpm-lock.yaml
        run: tar -czf pnpm-lock.tar.gz pnpm-lock.yaml

      # 10. GitHub Actions VM의 퍼블릭 IP 가져오기
      - name: Get public IP
        id: ip
        run: |
          IP=$(curl -s https://checkip.amazonaws.com)
          echo "Runner public IP: $IP"
          # 이 값은 이후 steps.ip.outputs.ipv4 로 그대로 사용 가능
          echo "ipv4=$IP" >> "$GITHUB_OUTPUT"

      # 11. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-northeast-2"

      - name: Add GitHub Actions IP to Security Group
        run: |
          echo "🔍 GitHub Actions Public IP: ${{ steps.ip.outputs.ipv4 }}"
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32 || true

      # 13. AWS EC2로 빌드된 파일 전송 (SCP)
      - name: Transfer build files to EC2
        run: |
          echo "🔑 Setting up SSH Key..."
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          echo "🚀 Transferring files to EC2..."
          scp -i ~/.ssh/id_rsa \
              -o StrictHostKeyChecking=no \
              packages/backend/backend.tar.gz \
              packages/frontend/frontend.tar.gz \
              pnpm-lock.yaml \
              ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/DailyApp2/

      #14. EC2에서 배포 및 PM2 재시작
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            echo "🚀 Starting Safe Deployment..."

            echo "📂 Preparing Backend Deployment..."
            cd /home/ubuntu/DailyApp2

            # 🔹 압축 해제 (기존 dist 폴더 삭제 X)
            tar -xzf backend.tar.gz -C packages/backend

            # 🔹 pnpm 설치
            if ! command -v pnpm &> /dev/null; then
              echo "pnpm not found. Installing pnpm..."
              curl -fsSL https://get.pnpm.io/install.sh | sh -
              export PATH=$HOME/.local/share/pnpm:$PATH
              echo 'export PATH=$HOME/.local/share/pnpm:$PATH' >> ~/.bashrc
              source ~/.bashrc
            fi

            # 🔹 의존성 설치 (빌드 전에 실행)
            echo "📦 Installing Dependencies..."
            pnpm install --frozen-lockfile --production

            # 🔹 PM2 서비스 재시작
            echo "🚀 Restarting Backend Server..."
            pm2 restart nest-server-prod || pm2 start ecosystem.config.js --env production

            echo "📂 Preparing Frontend Deployment..."
            cd /home/ubuntu/DailyApp2

            # 🔹 압축 해제 (기존 dist 폴더 삭제 X)
            tar -xzf frontend.tar.gz -C packages/frontend

      # 15. (항상 실행) 보안 그룹 규칙 회수
      - name: Revoke GitHub Actions IP from Security Group
        if: always()
        run: |
          echo "🧹 Revoking SG ingress for ${{ steps.ip.outputs.ipv4 }}/32"
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32 || true
