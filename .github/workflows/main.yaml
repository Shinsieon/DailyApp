name: Test & Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  test-and-build:
    runs-on: ubuntu-latest # GitHub Actions에서 실행

    steps:
      # 1. GitHub repository 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Node.js & pnpm 설치
      - name: Set up Node.js and pnpm
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"

      - name: Install pnpm
        run: npm install -g pnpm

      # 3. 🔹 백엔드 테스트 (NestJS)
      - name: Install dependencies & Run Backend Tests
        run: |
          cd packages/backend
          pnpm install --frozen-lockfile
          pnpm test  # Jest 실행 (테스트 실패 시 중단)

      # 4. 🔹 프론트엔드 테스트 (React)
      - name: Install dependencies & Run Frontend Tests
        run: |
          cd packages/frontend
          pnpm install --frozen-lockfile
          pnpm test --watchAll=false  # React Testing Library 실행

      # 5. 🔹 백엔드 빌드
      - name: Build Backend
        run: |
          cd packages/backend
          pnpm build
          tar -czf backend.tar.gz dist package.json pnpm-lock.yaml

      # 6. 🔹 프론트엔드 빌드
      - name: Build Frontend
        run: |
          cd packages/frontend
          pnpm build
          tar -czf frontend.tar.gz dist package.json pnpm-lock.yaml

      # 7. 🔹 AWS EC2로 빌드된 파일 전송 (SCP)
      # - name: Transfer build files to EC2
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.EC2_PRIVATE_KEY }}
      #     source: "packages/backend/backend.tar.gz,packages/frontend/frontend.tar.gz"
      #     target: "/home/ubuntu/DailyApp2"

      # # 8. 🔹 EC2에서 배포 및 PM2 재시작
      # - name: Deploy on EC2
      #   uses: appleboy/ssh-action@v0.1.7
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.EC2_PRIVATE_KEY }}
      #     script: |
      #       echo "🚀 Extracting and Deploying Backend..."
      #       cd /home/ubuntu/DailyApp2
      #       rm -rf packages/backend/dist
      #       tar -xzf backend.tar.gz -C packages/backend
      #       cd packages/backend
      #       pnpm install --frozen-lockfile --production  # 운영환경 의존성 설치
      #       pm2 restart nest-server-prod || pm2 start dist/main.js --name "nest-server-prod"

      #       echo "🚀 Extracting and Deploying Frontend..."
      #       cd /home/ubuntu/DailyApp2
      #       rm -rf packages/frontend/dist
      #       tar -xzf frontend.tar.gz -C packages/frontend
      #       cd packages/frontend
      #       pnpm install --frozen-lockfile --production

      #       echo "✅ Deployment completed."
